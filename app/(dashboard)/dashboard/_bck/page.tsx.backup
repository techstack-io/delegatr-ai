"use client";

import React, { useEffect, useMemo, useState } from "react";

/* -------------------- Types -------------------- */

type Project = { id: string; name: string; leadId?: string | null };
type AddToProjectResult = { ok: boolean; projectId?: string; project?: Project; error?: string };

type LocalAddToProjectButtonProps = {
  leadId?: string | null;
  leadName?: string | null;
  onOpen?: (payload: { id?: string | null; name?: string | null }) => void;
};

type LocalProjectModalProps = {
  open: boolean;
  onClose: () => void;
  leadId?: string | null;
  leadName?: string | null;
  onAdd?: (res: AddToProjectResult) => void;
};

type StatCardProps = {
  title: string;
  value: string | number | null | undefined;
  subtitle?: string;
  icon?: React.ReactNode;
};

export type CompanyLead = {
  id?: string;
  name?: string;
  domain?: string;
  industry?: string;
  last_seen?: string;
  leadfeeder_id?: string;
  enrichment?: any;
  priority?: string;
  score?: number;
  visits?: number;
  time?: number; // seconds
  topInsight?: string;
};

type LeadsTableByPriorityProps = {
  leads?: CompanyLead[];
  onAddToProject?: (lead: CompanyLead) => void;
};

type DashboardSummaryCardProps = {
  metrics?: {
    totalLeads?: number;
    hotLeads?: number;
    hotCut?: number;
    agentRuns?: number;
    activeAgents?: number;
    totalVisitors?: number;
    avgCompaniesPerDay?: number;
    days?: number;
  };
};

/* -------------------- Local UI (client-only) -------------------- */

const LocalAddToProjectButton: React.FC<LocalAddToProjectButtonProps> = ({ leadId, leadName, onOpen }) => {
  return (
    <button
      type="button"
      onClick={() => onOpen?.({ id: leadId ?? null, name: leadName ?? null })}
      className="px-3 py-1 bg-white border border-gray-200 rounded text-sm hover:bg-gray-50"
    >
      Add to Project
    </button>
  );
};

function LocalProjectModal({ open, onClose, leadId, leadName, onAdd }: LocalProjectModalProps) {
  const [name, setName] = useState<string>(leadName ? `${leadName} — ${new Date().toISOString().slice(0, 10)}` : "");
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (open) {
      setName(leadName ? `${leadName} — ${new Date().toISOString().slice(0, 10)}` : "");
      setError(null);
    }
  }, [open, leadName]);

  if (!open) return null;

  const handleAdd = async () => {
    setError(null);
    const trimmed = (name || "").trim();
    if (!trimmed) {
      setError("Enter a project name");
      return;
    }
    setLoading(true);
    try {
      await new Promise((r) => setTimeout(r, 400));
      const projectId = "proj_" + Math.random().toString(36).slice(2, 9);
      const project: Project = { id: projectId, name: trimmed, leadId: leadId ?? null };
      onAdd?.({ ok: true, projectId, project });

      try {
        // defensive localStorage write
        if (typeof window !== "undefined" && window.localStorage) {
          const weekKey = `project:${leadId ?? "anon"}:${new Date().toISOString().slice(0, 10)}`;
          localStorage.setItem(weekKey, JSON.stringify({ id: projectId, name: trimmed }));
        }
      } catch (e) {
        // ignore storage errors
      }

      setName("");
      onClose();
    } catch (e) {
      setError("Unexpected error");
      onAdd?.({ ok: false, error: "Unexpected error" });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      <div className="absolute inset-0 bg-black opacity-50" onClick={onClose} />
      <div className="bg-white rounded-lg p-6 z-10 w-full max-w-md">
        <h3 className="text-lg font-semibold mb-2">Add to Project</h3>
        <label className="text-xs text-gray-600">Project name</label>
        <input
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Project name"
          className="w-full border rounded px-3 py-2 mb-3"
        />
        {error && (
          <p className="text-sm text-red-600 mb-2" role="alert">
            {error}
          </p>
        )}
        <div className="flex justify-end gap-2">
          <button onClick={onClose} className="px-4 py-2 bg-gray-100 rounded">
            Cancel
          </button>
          <button onClick={handleAdd} disabled={loading} className="px-4 py-2 bg-gray-900 text-white rounded">
            {loading ? "Adding…" : "Add"}
          </button>
        </div>
      </div>
    </div>
  );
}

/* -------------------- Small reusable cards -------------------- */

const TotalLeadsCard: React.FC<{ total?: number }> = ({ total }) => (
  <div className="bg-white rounded-xl shadow p-6">
    <div className="text-sm text-gray-500">Total Leads</div>
    <div className="text-3xl font-bold text-gray-900 mt-2">{total ?? 0}</div>
    <div className="text-xs text-gray-500 mt-1">Unique companies this week</div>
  </div>
);

const HotLeadsCard: React.FC<{ hot?: number; cutoff?: number }> = ({ hot, cutoff }) => (
  <div className="bg-white rounded-xl shadow p-6">
    <div className="flex justify-between items-start">
      <div>
        <div className="text-sm text-gray-500">Hot Leads</div>
        <div className="text-3xl font-bold text-gray-900 mt-2">{hot ?? "N/A"}</div>
        <div className="text-xs text-gray-500 mt-1">Top 10% by visits (cutoff {cutoff ?? "—"})</div>
      </div>
      <div>
        <button className="px-3 py-1 bg-gray-900 text-white rounded text-sm">Create for HOT</button>
      </div>
    </div>
  </div>
);

function StatCard({ title, value, subtitle, icon }: StatCardProps) {
  return (
    <div className="bg-white rounded-xl shadow p-6 flex gap-4 items-center">
      <div className="w-12 h-12 flex items-center justify-center rounded-lg bg-gray-100">{icon}</div>
      <div className="flex-1">
        <div className="text-sm text-gray-500">{title}</div>
        <div className="text-2xl font-bold text-gray-900 mt-1">{value ?? "—"}</div>
        {subtitle && <div className="text-xs text-gray-500 mt-1">{subtitle}</div>}
      </div>
    </div>
  );
}

/* -------------------- Exported summary card -------------------- */

export function DashboardSummaryCard({ metrics }: DashboardSummaryCardProps) {
  const m = metrics ?? {};
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      <TotalLeadsCard total={m.totalLeads} />
      <HotLeadsCard hot={m.hotLeads} cutoff={m.hotCut} />
    </div>
  );
}

/* -------------------- Leads table grouped by priority -------------------- */

export function LeadsTableByPriority({ leads = [], onAddToProject }: LeadsTableByPriorityProps) {
  const grouped = useMemo(() => {
    const map: Record<string, CompanyLead[]> = { HOT: [], WARM: [], COLD: [] };
    (leads || []).forEach((l) => {
      const p = (l.priority || "COLD").toUpperCase();
      if (!map[p]) map[p] = [];
      map[p].push(l);
    });
    return map;
  }, [leads]);

  return (
    <div className="space-y-6">
      {["HOT", "WARM", "COLD"].map((priority) => (
        <div key={priority} className="bg-white rounded-lg shadow p-4">
          <h4 className="font-semibold mb-3">
            {priority} leads ({grouped[priority]?.length || 0})
          </h4>
          <div className="overflow-x-auto">
            <table className="w-full table-auto">
              <thead>
                <tr className="text-left text-sm text-gray-500">
                  <th className="px-2 py-1">Company</th>
                  <th className="px-2 py-1">Score</th>
                  <th className="px-2 py-1">Visits</th>
                  <th className="px-2 py-1">Avg time</th>
                  <th className="px-2 py-1">Insights</th>
                  <th className="px-2 py-1">Actions</th>
                </tr>
              </thead>
              <tbody>
                {(grouped[priority] || []).map((c, i) => (
                  <tr key={c.id ?? `${c.name ?? "lead"}-${i}`} className="border-t">
                    <td className="px-2 py-2">
                      <div className="font-medium">{c.name}</div>
                      <div className="text-xs text-gray-500">{c.industry ?? ""}</div>
                    </td>
                    <td className="px-2 py-2">{c.score ?? "—"}</td>
                    <td className="px-2 py-2">{c.visits ?? 0}</td>
                    <td className="px-2 py-2">
                      {Math.floor((c.time ?? 0) / 60)}m {(c.time ?? 0) % 60}s
                    </td>
                    <td className="px-2 py-2 text-xs text-gray-600">{(c.topInsight ?? "").slice(0, 60)}</td>
                    <td className="px-2 py-2">
                      <LocalAddToProjectButton leadId={c.id} leadName={c.name} onOpen={() => onAddToProject?.(c)} />
                    </td>
                  </tr>
                ))}
                {(!grouped[priority] || grouped[priority].length === 0) && (
                  <tr>
                    <td colSpan={6} className="px-2 py-4 text-sm text-gray-500">
                      No leads in this bucket.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      ))}
    </div>
  );
}

/* -------------------- Page component -------------------- */

export default function DashboardExample({ metrics: serverMetrics }: { metrics?: Partial<{ totalLeads:number; hotLeads:number; agentRuns:number|string; activeAgents:number; totalVisitors?:number; avgCompaniesPerDay?:number; days?:number; hotCut?:number; }> } = {}): JSX.Element {
  const [selectedLead, setSelectedLead] = useState<CompanyLead | null>(null);
  const [projectModalOpen, setProjectModalOpen] = useState<boolean>(false);

  const sampleLeads: CompanyLead[] = [
    { id: "1", name: "Electronic Contracting (ECC)", industry: "Specialty Trade", priority: "HOT", score: 100, visits: 12, time: 1680, topInsight: "Downloaded 2 technical PDFs" },
    { id: "2", name: "Acme Systems", industry: "AV Integrator", priority: "WARM", score: 72, visits: 5, time: 420, topInsight: "Viewed product pages" },
    { id: "3", name: "MidTown Rentals", industry: "Rental", priority: "COLD", score: 45, visits: 2, time: 120, topInsight: "Viewed pinouts" },
  ];
  // compute metrics (placeholder)
  const defaultMetrics = {
    totalLeads: 273,
    hotLeads: 28,
    agentRuns: 360,
    activeAgents: 0,
    totalVisitors: 911,
    avgCompaniesPerDay: 39.0,
    days: 7,
    hotCut: 28,
  };

  const metrics = { ...defaultMetrics, ...(serverMetrics || {}) };


  function handleAddToProject(lead: CompanyLead) {
    setSelectedLead(lead);
    setProjectModalOpen(true);
  }

  return (
    <div className="max-w-6xl mx-auto p-6 space-y-6">
      <h1 className="text-3xl font-bold text-slate-800">
        Welcome back, Dan! <span role="img" aria-label="wave">👋</span>
      </h1>
      <p className="text-gray-600">Here's what's happening with your leads this week.</p>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 text-slate-800" data-tour-id="stats-cards">
        <StatCard title="Total Leads" value={metrics.totalLeads ?? "0"} subtitle="Source: GET /api/metrics" icon={<svg className="w-8 h-8" viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="12" cy="7" r="3" strokeWidth="1.5"/><path d="M5.5 21a6.5 6.5 0 0113 0" strokeWidth="1.5"/></svg>} />
        <StatCard title="Hot Leads" value={metrics.hotLeads ?? "0"} subtitle="Top 10% by visits — Source: /api/metrics/hot" icon={<svg className="w-8 h-8" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M3 12h6l3 8 5-16 3 8h2" strokeWidth="1.5"/></svg>} />
        <StatCard title="Agent Runs" value={metrics.agentRuns ?? "0"} subtitle="This week — Source: /api/metrics/sessions" icon={<svg className="w-8 h-8" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M12 2v6l4 2-4 2v6" strokeWidth="1.5"/></svg>} />
        <StatCard title="Active Agents" value={metrics.activeAgents ?? "0"} subtitle="Ready to deploy — Source: /api/agents/active" icon={<svg className="w-8 h-8" viewBox="0 0 24 24" fill="none" stroke="currentColor"><rect x="3" y="3" width="18" height="18" rx="2" strokeWidth="1.5"/><path d="M8 14v-4h8v4" strokeWidth="1.5"/></svg>} />
      </div>

      <div className="text-xs text-gray-400 mt-2">Data endpoints: GET /api/metrics, GET /api/metrics/hot, GET /api/metrics/sessions, GET /api/agents/active</div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-2">
          <LeadsTableByPriority leads={sampleLeads} onAddToProject={handleAddToProject} />
        </div>

        <div>
          <div className="bg-white rounded-lg shadow p-4">
            <h4 className="font-semibold mb-3">Quick Actions</h4>
            <div className="flex flex-col gap-2">
              <button className="px-4 py-2 bg-gray-900 text-white rounded">Create projects for HOT leads</button>
              <button className="px-4 py-2 bg-white border rounded">Export CSV</button>
            </div>
          </div>
        </div>
      </div>

      <LocalProjectModal
        open={projectModalOpen}
        onClose={() => {
          setProjectModalOpen(false);
          setSelectedLead(null);
        }}
        leadId={selectedLead?.id ?? null}
        leadName={selectedLead?.name ?? null}
        onAdd={(res) => {
          if (res.ok) console.log("Project created", res.projectId);
          else console.error("Project error", res.error);
        }}
      />
    </div>
  );
}
